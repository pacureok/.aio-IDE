<meta>
project_name = "Aio Full Stack Demo",
version = "1.0.0",
author = "Your Aio Vision",
output_dir = "aio_demo_build", # Nuevo directorio para esta demostración
description = "Comprehensive Aio project demonstrating multi-language generation and build features."
</meta>

<crea>
# Directorio para recursos del proyecto (imágenes, assets, etc.)
$crea=file Name="Project_Assets" %Not_extencion,
$crea=file Name="Project_Assets/logo_aio" %extencion .png,
$crea=file Name="Project_Assets/data_config" %extencion .json,

# Archivo de ejemplo que se borrará condicionalmente
# Asumimos que un "pin" 'deploy_success' de esp controlaría si se borra un log de pre-deploy
# Si 'deploy_success' es "no" (falla), el log se mantendría. Si es "si", se borraría.
$crea=file Name="pre_deploy_log" %extencion .txt,
%borra=file="aio_demo_build/pre_deploy_log.txt" &con "deploy_success",

# Ejemplo de borrado incondicional de un archivo temporal
$crea=file Name="temp_build_file" %extencion .tmp,
%borra=Name="temp_build_file.tmp",
</crea>

<video>
  <!DOCTYPE html>
  <html lang="es">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aio Full Demo</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <h1>¡Bienvenido a Aio Full Stack Demo!</h1>
      <img src="Project_Assets/logo_aio.png" alt="Aio Logo" width="100">
    </header>
    <main>
      <section id="frontend-info">
        <h2>Frontend (HTML, CSS, JS)</h2>
        <p>Esta página y su estilo han sido generados por Aio.</p>
        <button id="demoButton">Haz clic para JS</button>
        <div id="jsOutput"></div>
      </section>

      <section id="backend-info">
        <h2>Backend y Lógica (ESP, ING, .NET, Go, Rust, Lua, SQL)</h2>
        <p>Estos componentes no se ven directamente aquí, pero sus archivos han sido generados.</p>
        <p>Consulta la carpeta `aio_demo_build/` para ver el código generado.</p>
      </section>

      <section id="project-structure">
        <h2>Estructura del Proyecto</h2>
        <p>Archivos de solución (.sln), proyectos (.csproj), configuración (.config), y XAML para interfaces de escritorio también fueron generados.</p>
      </section>
    </main>
    <footer>
      <p>&copy; 2025 Aio Demo. Todos los derechos reservados.</p>
    </footer>
    <script src="script.js"></script>
  </body>
  </html>
</video>

<cs>
body {
  font-family: 'Segoe UI', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #1a1a2e;
  color: #e0e0e0;
  line-height: 1.6;
}
header {
  background-color: #0f3460;
  padding: 20px 0;
  text-align: center;
  border-bottom: 3px solid #e94560;
}
header h1 {
  margin: 0;
  color: #fff;
}
main {
  max-width: 900px;
  margin: 20px auto;
  padding: 0 20px;
}
section {
  background-color: #2e2e4e;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}
h2 {
  color: #e94560;
  border-bottom: 2px solid #0f3460;
  padding-bottom: 10px;
  margin-top: 0;
}
button {
  background-color: #0f3460;
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s ease;
}
button:hover {
  background-color: #e94560;
}
footer {
  text-align: center;
  padding: 20px;
  margin-top: 30px;
  background-color: #0f3460;
  border-top: 3px solid #e94560;
}
</cs>

<tp>
console.log("Aio Full Stack Demo: JavaScript cargado.");

document.getElementById('demoButton').addEventListener('click', () => {
  const outputDiv = document.getElementById('jsOutput');
  outputDiv.textContent = '¡El JavaScript se está ejecutando! Fecha: ' + new Date().toLocaleString();
  outputDiv.style.color = '#0f0';
  console.log("Botón de demostración JS presionado.");
});
</tp>

(esp)
# Lógica de gestión de un sistema ESP (en español)
$creafuntion "iniciar_sistema_principal" &intert 
(
  componentes_activos = ["UI", "BackendDB", "API_Gateway"],
  modo_operacion = "normal"
),

$inter=rule(monitorizar_rendimiento (pin= "carga_cpu" "uso_memoria")),

@decte (pin= "carga_cpu" of accion "monitorizar_rendimiento"=run optimizar_recursos {CPU > 80%}),
@decte (evento="usuario_registrado" of accion "iniciar_sistema_principal"=run notificar_admins {new_user_id}),

# Pin para la demostración de borrado condicional en <crea>
crea=pin=Name=deploy_success,
deploy_success=pin={funtion=check_deploy_status}="si" "no", # Conceptual: 'si' si el despliegue fue exitoso, 'no' si falló.
(/esp)

<ING>
# Logic for an ING system (English)
$create_function "initialize_main_system" &insert 
(
  active_components = ["UI", "BackendDB", "API_Gateway"],
  operation_mode = "normal"
),

$inter=rule(monitor_performance (pin= "cpu_load" "memory_usage")),

@detect (pin= "cpu_load" of action "monitor_performance"=run optimize_resources {CPU > 80%}),
@detect (event="user_registered" of action "initialize_main_system"=run notify_admins {new_user_id}),
</ING>

(pat)
# Patrones de Orquestación o Flujo de Trabajo
$state "System_Idle",
$state "System_Initializing",
$state "System_Running",
$state "System_Maintenance",

$task "Start_System_Workflow",
    transition_to_state "System_Initializing",
    log_message "Iniciando secuencia de arranque del sistema.",
    run_logic_from_esp { $creafuntion "realizar_chequeos_pre_arranque" &intert (), },
    wait_time (seconds=2.0),
    log_message "Chequeos completados. Transicionando a Running.",
    transition_to_state "System_Running",
    play_sound "system_online.wav",
    end_task,

@on_event "critical_error_detected",
    transition_to_state "System_Maintenance",
    log_message "¡Error crítico! Sistema en modo mantenimiento.",
    alert_system_admins (message="Error en componente X"),
    run_logic_from_net { $creafuntion "log_error_to_database" &intert (error_code="0xDEADBEEF"), },
(/pat)

<net>
// C# Backend Service Code
using System;
using System.Threading.Tasks;

namespace AioBackendService
{
    public class ServiceLogic
    {
        public string GetSystemStatus()
        {
            return "Aio Backend Service: Running smoothly.";
        }

        public async Task<int> ProcessDataAsync(string data)
        {
            Console.WriteLine($"Processing data: {data}");
            await Task.Delay(100); // Simulate async work
            return data.Length * 10;
        }

        public static void Main(string[] args)
        {
            Console.WriteLine("Aio C# Backend Service Started.");
            ServiceLogic logic = new ServiceLogic();
            Console.WriteLine(logic.GetSystemStatus());
        }
    }
}
</net>

<lua>
-- Lua Configuration and Scripting
local app_settings = {
    api_endpoint = "https://api.example.com/aio",
    timeout_seconds = 5,
    max_retries = 3
}

function get_api_endpoint()
    return app_settings.api_endpoint
end

print("Lua Configuration Loaded:")
for k, v in pairs(app_settings) do
    print(string.format("  %s: %s", k, tostring(v)))
end
</lua>

<rs>
// Rust Performance Critical Module
// Could be for data processing, cryptography, etc.
fn main() {
    println!("Rust Performance Module Loaded.");
    let numbers = vec![1, 2, 3, 4, 5];
    let sum: i32 = numbers.iter().sum();
    println!("Sum calculated in Rust: {}", sum);
}

#[no_mangle]
pub extern "C" fn process_sensor_data(data_array: *const f64, len: usize) -> f64 {
    let slice = unsafe { std::slice::from_raw_parts(data_array, len) };
    slice.iter().sum() / (len as f64) // Calculate average
}
</rs>

<go>
// Go Microservice or Concurrency Handler
package main

import (
	"fmt"
	"time"
)

func main() {
	fmt.Println("Go Concurrency Handler Started.")
	// Simulate a concurrent task
	go func() {
		for i := 0; i < 2; i++ {
			time.Sleep(time.Second * 1)
			fmt.Println("Go: Background task running...")
		}
		fmt.Println("Go: Background task complete.")
	}()

	fmt.Println("Go: Main routine continuing...")
	time.Sleep(time.Millisecond * 500)
}

func GetStatusMessage() string {
    return "Go service is active."
}
</go>

<sql>
-- SQL Database Schema and Initialization Script
-- For a hypothetical User Management System

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE,
    email TEXT UNIQUE,
    password_hash TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_login DATETIME
);

CREATE TABLE IF NOT EXISTS products (
    product_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT,
    price REAL NOT NULL,
    stock_quantity INTEGER DEFAULT 0
);

INSERT INTO users (username, email, password_hash) VALUES ('admin_aio', 'admin@aio.com', 'hashed_password_123');
INSERT INTO products (name, price, stock_quantity) VALUES ('Aio Smart Device', 99.99, 150);
INSERT INTO products (name, price, stock_quantity) VALUES ('Aio Extension Pack', 29.99, 500);
</sql>

<sln>
# Visual Studio Solution File for a multi-project setup
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.0.31903.59
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AioBackendService", "AioBackendService\AioBackendService.csproj", "{B8F3D1C2-D4E5-4A9B-8C7D-0A1B2C3D4E5F}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AioDesktopApp", "AioDesktopApp\AioDesktopApp.csproj", "{C9A2E0B1-F3D4-4E8A-9B7C-1D2E3F4A5B6C}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{B8F3D1C2-D4E5-4A9B-8C7D-0A1B2C3D4E5F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B8F3D1C2-D4E5-4A9B-8C7D-0A1B2C3D4E5F}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B8F3D1C2-D4E5-4A9B-8C7D-0A1B2C3D4E5F}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B8F3D1C2-D4E5-4A9B-8C7D-0A1B2C3D4E5F}.Release|Any CPU.Build.0 = Release|Any CPU
		{C9A2E0B1-F3D4-4E8A-9B7C-1D2E3F4A5B6C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C9A2E0B1-F3D4-4E8A-9B7C-1D2E3F4A5B6C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{C9A2E0B1-F3D4-4E8A-9B7C-1D2E3F4A5B6C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{C9A2E0B1-F3D4-4E8A-9B7C-1D2E3F4A5B6C}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {D2E1C0B3-F4A5-4E6B-9D8C-2F3E4A5B6C7D}
	EndGlobalSection
EndGlobal
</sln>

<xaml>
<Window x:Class="AioDesktopApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        Title="Aio Desktop App" Height="450" Width="800">
    <Grid>
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
            <TextBlock Text="¡Hola desde Aio Desktop App (XAML)!" FontSize="30" Margin="10" />
            <Button Content="Haz clic aquí" Width="150" Height="40" Margin="10" Click="Button_Click" />
            <TextBlock x:Name="statusTextBlock" Text="Esperando interacción..." FontSize="18" Margin="10" />
        </StackPanel>
    </Grid>
</Window>
</xaml>

<config>
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <appSettings>
        <add key="Environment" value="Development" />
        <add key="LogFilePath" value="C:\Logs\AioDemoApp.log" />
        <add key="ApiBaseUrl" value="http://localhost:8080/api/v1/" />
    </appSettings>
    <connectionStrings>
        <add name="DefaultConnection" 
             connectionString="Data Source=aio_demo.db;Version=3;" 
             providerName="System.Data.SQLite" />
    </connectionStrings>
</configuration>
</config>

<csproj>
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <UseWPF>true</UseWPF>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <RootNamespace>AioDesktopApp</RootNamespace>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Data.SQLite" Version="8.0.0" />
  </ItemGroup>

</Project>
</csproj>
